# -*- coding: utf-8 -*-
#
# Copyright (c) 2004, 2005, 2006, 2007, 2008,
#               Markus Leist <leist@ikom-online.de>
# See also LICENSE.txt or http://www.ict-ok.org/LICENSE
# This file is part of ict-ok.org.
#
# $Id$
#
# pylint: disable-msg=E1101,E0611
#
"""Adapter implementation for generating graphviz-dot configuration
"""

__version__ = "$Id$"

# python imports
import logging
from datetime import datetime
from pytz import timezone

# zope imports
from zope.app import zapi
from zope.interface import implements
from zope.component import adapts

# ict_ok.org imports
from org.ict_ok.components.service.interfaces import IService
from org.ict_ok.components.supernode.adapter.nagios import \
     GenNagios as ParentGenNagios
from org.ict_ok.admin_utils.generators.nagios.interfaces import \
     IGenNagios
from org.ict_ok.version import getIkVersion

logger = logging.getLogger("ServiceGenNagios")

#from zope.interface.verify import verifyObject
#from org.ict_ok.components.service.service import Service
#from zope.schema import vocabulary
#from org.ict_ok.admin_utils.eventcrossbar.eventcrossbar import AllEventInstances


class GenNagios(ParentGenNagios):
    """adapter implementation of Service -> nagios
    """

    implements(IGenNagios)
    adapts(IService)
    
    # modification of this attributes will trigger an new generation of
    # the config file
    attrList = ['objectID', 'ikName']
    
    def __init__(self, context):
        #print "ServiceGenNagios.__init__"
        ParentGenNagios.__init__( self, context)

    def fileOpen(self):
        """will open a filehandle to the specific object
        """
        objId = self.context.getObjectId()
        self.fileName = u'/opt/nagios/etc/ict_ok/Services/%s.cfg' % objId
        ParentGenNagios.fileOpen(self)
        
    def traverse4nagiosGeneratorPre(self, level=0, comments=True):
        """graphviz configuration preamble
        """
        tmp_interface = zapi.getParent(self.context)
        tmp_host = zapi.getParent(tmp_interface)
        if comments:
            self.write(u"%s## Pre (%s,%d) - ServiceGenNagios" % \
                       ("\t" * level, self.context.ikName, level))
        self.write(u"define service {\n")
        self.write(u"    use generic-ping\n")
        self.write(u"    host_name %s\n" % tmp_host.objectID)
        self.write(u"    service_description %s\n" % (self.context.objectID))
        self.write(u"    display_name %s\n" % (self.context.ikName))
        self.write(u"    contact_groups    admins\n")
        self.write(u"    check_period    24x7\n")
        self.write(u"    notification_interval    0\n")
        self.write(u"    notification_options    w,u,c,r\n")
        self.write(u"    notification_period    24x7\n")
        self.write(u"    check_command    check_ssh!1!22\n")
        self.write(u"    max_check_attempts    3\n")
        self.write(u"    normal_check_interval    5\n")
        self.write(u"    retry_check_interval    1\n")
        self.write(u"}\n\n")


    def traverse4nagiosGeneratorPost(self, level=0, comments=True):
        """graphviz configurations text after object
        """
        if comments:
            self.write(u"%s## Post (%s,%d) - ServiceGenNagios" % \
                       ("\t" * level, self.context.ikName, level))

    #def nagiosConfigFileOut(self):
        #"""Nagios-Filegenerator for this host object
        #"""
        ##berlinTZ = timezone('Europe/Berlin')
        ##dtServiceCfg = datetime.now(berlinTZ)
        ##iServicen = self.context.getObjectId() # internal object id as filename
        ###fpHostCfg = open(u'/opt/ikomtrol/etc/Host.cfg', 'w+')
        ##fpServiceCfg = open(u'/opt/nagios/etc/ict_ok/'+ iServicen +'.cfg', 'w')
        ##fpServiceCfg.write(u"# " + iServicen + ".cfg\n")
        ##fpServiceCfg.write(u"# generated by ict-ok.org Ver. %s (%s)\n\n" %
                        ##(getIkVersion(), dtServiceCfg))
        ##fileDict = {'ServiceCfg': fpServiceCfg}
        #self.fileOpen()
        #self.traverse4nagiosGenerator(level=1, comments=False)
        ##fpServiceCfg.write(u"\n\n# ok, generated in %s\n" %
                        ##(datetime.now(berlinTZ) - dtServiceCfg))
        ##fpServiceCfg.close()
        #self.fileClose()
        
    def nagiosConfigFileRemove(self):
        """remove old nagios configuration file for this object
        """
        iServicen = self.context.getObjectId() # internal object id as filename
        import os
        filename = u'/opt/nagios/etc/ict_ok/Services/'+ iServicen +'.cfg'
        try:
            os.remove(filename)
        except OSError, errtext:
            raise Exception, "No such configfile: '%s'" % filename


def _test():
    import doctest
    options = doctest.ELLIPSIS
    return doctest.testfile('../../../doctests/nagios-service.txt', optionflags=options)

if __name__=="__main__":
    _test()
