# -*- coding: utf-8 -*-
#
# [[[cog
#    import sys; sys.path.extend(['.'])
#    import props
#    import cog
#    cog.out("# Copyright (c) ")
#    for year in props.copyrights:
#        cog.out("%4d, " % year)
#    cog.outl()
#    for author in props.authors:
#       cog.outl("#               %s <%s>" % (author['name'], author['email']))
#    cog.out("%s" % props.filename ) ]]]
# Copyright (c) 2006, 2007, 
#               Markus Leist <leist@ikom-online.de>
# [[[end]]]
# See also LICENSE.txt or http://www.ict-ok.org/LICENSE
# This file is part of ict-ok.org.
#
# $Id$
#
# pylint: disable-msg=E1101,W0142
#
# [[[cog cog.outl('"""implementation of %(componentname)s"""' % props.__dict__)]]]
# [[[end]]]

__version__ = "$Id$"

# python imports

# zope imports
from zope.interface import implements
from zope.schema.fieldproperty import FieldProperty
from zope.app.intid.interfaces import IIntIds
from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
from zope.component import getUtility
from zope.app.intid.interfaces import IIntIds
from zope.app.folder import Folder

# lovely imports
from lovely.relation.property import RelationPropertyIn
from lovely.relation.property import RelationPropertyOut
from lovely.relation.property import FieldRelationManager

# ict_ok.org imports
from org.ict_ok.libs.lib import getRefAttributeNames
from org.ict_ok.components.superclass.superclass import Superclass
#[[[cog
#   cog.out('''\
#   from %(longpath_interface)s import I%(componentname)s
#   from %(longpath_interface)s import I%(componentname)sFolder
#   from %(longpath_interface)s import IAdd%(componentname)s
#   ''' % props.__dict__, dedent=True)
#]]]
#[[[end]]]
from org.ict_ok.components.component import Component
from org.ict_ok.components.interfaces import \
    IImportCsvData, IImportXlsData
from org.ict_ok.components.component import \
    AllComponents, AllComponentTemplates, AllUnusedOrSelfComponents
from org.ict_ok.osi import osi
from org.ict_ok.components.physical_component.physical_component import \
    PhysicalComponent
#[[[cog
#   for importText in props.__dict__['additionalClassImports']:
#       cog.outl(importText)
#]]]
#[[[end]]]

#[[[cog
#   cog.out('''\
#   def All%(componentname)sTemplates(dummy_context):
#       return AllComponentTemplates(dummy_context, I%(componentname)s)
#
#   def All%(componentname)ss(dummy_context):
#       return AllComponents(dummy_context, I%(componentname)s)
#   ''' % props.__dict__, dedent=True)
#]]]
#[[[end]]]

#[[[cog
#   for (varName, displayName, otherClassName) in props.connInTuples:
#       my_dict = {'i_varName':varName,
#                  'i_displayName':displayName ,
#                  'i_otherClassName':otherClassName}
#       my_dict.update(props.__dict__)
#       cog.out('''\
#       def AllUnusedOrUsed%(i_otherClassName)s%(componentname)ss(dummy_context):
#           return AllUnusedOrSelfComponents(dummy_context, I%(componentname)s, '%(i_varName)s')
#       ''' % my_dict, dedent=True)
#
#]]]
#[[[end]]]


#[[[cog
#   for (varName, displayName, otherClassName) in props.connOutTuples:
#       my_dict = {'i_varName':varName,
#                  'i_displayName':displayName ,
#                  'i_otherClassName':otherClassName}
#       my_dict.update(props.__dict__)
#       cog.out('''\
#       %(componentname)s_%(i_otherClassName)ss_RelManager = \\
#              FieldRelationManager(I%(componentname)s['%(i_varName)s'],
#                                   I%(i_otherClassName)s['%(filename)s'],
#                                   relType='%(filename)s:%(i_varName)s')
#       ''' % my_dict, dedent=True)
#
#]]]
#[[[end]]]




#[[[cog
#   cog.out('''\
#   class %(componentname)s(PhysicalComponent):
#       """
#       the template instance
#       """
#       implements(I%(componentname)s)
#       shortName = "%(filename)s"
#       # for ..Contained we have to:
#       __name__ = __parent__ = None
#   ''' % props.__dict__, dedent=True)
#]]]
#[[[end]]]

    #[[[cog
    #   for (varName, schema, displayName, displayDescription) in props.attrTuples:
    #       my_dict = {'i_varName':varName, 'i_schema':schema,
    #                  'i_displayName':displayName ,
    #                  'i_displayDescription':displayDescription}
    #       my_dict.update(props.__dict__)
    #       cog.out('''\
    #       %(i_varName)s = FieldProperty(I%(componentname)s['%(i_varName)s'])
    #       ''' % my_dict, dedent=True)
    #
    #]]]
    #[[[end]]]
    #[[[cog
    #   for (varName, displayName, otherClassName) in props.connInTuples:
    #       my_dict = {'i_varName':varName,
    #                  'i_displayName':displayName ,
    #                  'i_otherClassName':otherClassName}
    #       my_dict.update(props.__dict__)
    #       managerName = ""
    #       cog.out('''\
    #       %(i_varName)s = RelationPropertyIn(%(i_otherClassName)s_%(componentname)ss_RelManager)
    #       ''' % my_dict, dedent=True)
    #
    #]]]
    #[[[end]]]
    #[[[cog
    #   for (varName, displayName, otherClassName) in props.connOutTuples:
    #       my_dict = {'i_varName':varName,
    #                  'i_displayName':displayName ,
    #                  'i_otherClassName':otherClassName}
    #       my_dict.update(props.__dict__)
    #       managerName = ""
    #       cog.out('''\
    #       %(i_varName)s = RelationPropertyOut(%(componentname)s_%(i_otherClassName)ss_RelManager)
    #       ''' % my_dict, dedent=True)
    #
    #]]]
    #[[[end]]]

    #[[[cog
    #   textList = [n for n,s,dn,dd in props.attrTuples if s == 'TextLine' or s == 'Text']
    #   cog.out('''\
    #   fullTextSearchFields = %s
    #   fullTextSearchFields.extend(PhysicalComponent.fullTextSearchFields)
    #       ''' % (str(textList)), dedent=True)
    #]]]
    #[[[end]]]

#[[[cog
#   cog.out('''\
#
#       def __init__(self, **data):
#           """
#           constructor of the object
#           """
#           PhysicalComponent.__init__(self, **data)
#           refAttributeNames = getRefAttributeNames(%(componentname)s)
#           for (name, value) in data.items():
#               if name in I%(componentname)s.names() and \\
#                  name not in refAttributeNames:
#                   setattr(self, name, value)
#           self.ikRevision = __version__
#
#       def store_refs(self, **data):
#           PhysicalComponent.store_refs(self, **data)
#           refAttributeNames = getRefAttributeNames(%(componentname)s)
#           for (name, value) in data.items():
#               if name in refAttributeNames:
#                   setattr(self, name, value)
#
#
#   class %(componentname)sFolder(Superclass, Folder):
#       implements(I%(componentname)sFolder,
#                  IImportCsvData,
#                  IImportXlsData,
#                  IAdd%(componentname)s)
#       def __init__(self, **data):
#           """
#           constructor of the object
#           """
#           Superclass.__init__(self, **data)
#           Folder.__init__(self)
#   ''' % props.__dict__, dedent=True)
#]]]
#[[[end]]]
